//   public String[][] generateWithOneVariable(boolean isSub)
//   {
//     char letter = (char)(random.nextInt(26) + 97);
//     int num = random.nextInt(maxint);
//     int lorr = random.nextInt(2);
//     int letterVal = random.nextInt(maxint);
//     int lf = 0;
//     int rt = 0;
//     int sol = 0;
//     String problem = "";
//     String statement = "";
//     String solution = "";
//     Ops operand = generateOp();
// //     while (operand.equals(Ops.SQUARE))
// //       operand = generateOp();
//     String w = words;
//     if(isSub)
//       w = "the result of <op> <num> <con> <num>,";
//     
//     
//     if(lorr == 1)
//     {
//       statement = generateProblem(isSub, w, operand, String.valueOf(letter), String.valueOf(num), 1);
//       lf = letterVal;
//       rt = num;
//     }
//     else
//     {
//       statement = generateProblem(isSub, w, operand, String.valueOf(num), String.valueOf(letter), 2);
//       lf = num;
//       rt = letterVal;
//     }
//     
// //     statement = (statement.substring(0, statement.lastIndexOf(','))).concat(".");
//     
//     String evalStatement = generateProblem(false, wordsVar, null, String.valueOf(letter), String.valueOf(letterVal), 1);
//     
//     
//     switch (operand)
//     {
//       case ADD:
//         sol = lf + rt;
//         break;
//       case SUBTRACT:
//         sol = lf - rt;
//         break;
//       case MULTIPLY:
//         sol = lf * rt;
//         break;
//       case DIVIDE:
//         rt = random.nextInt(maxint-1) + 1; //so no 1/0
//         sol = lf / rt;
//         break;
//       case MODULO:
//         sol = lf % rt;
//         break;
// //       case SQUARE:
// //         sol = lf * lf;
// //         rt = lf;
// //         break;
//       default:
//         System.exit(1);
//         break;
//     }
//     problem = String.valueOf(lf) + " " + operand + " " + String.valueOf(rt);
//     solution = String.valueOf(sol);
// 
//     
// 
//     if(lorr == 1)
//       problem = letter + " " + operand + " " + num;
//     else
//       problem = num + " " + operand + " " + letter;
// 
//     String[][] answers = new String[2][2];
//     answers[0][0] = statement;
//     answers[0][1] = evalStatement;
//     answers[1][0] = problem;
//     answers[1][1] = solution;
//     return answers;
//   }



//     else if(op != null && op.equals(Ops.SQUARE))
//     {
//       rt = "";
//       problem = problem.substring(0, problem.indexOf("<op>")) + problem.substring(problem.indexOf("<op>"), problem.indexOf("<op>") + 10)// + problem.substring(11,16) 
//         + problem.substring(problem.indexOf("<op>") + 17);
//     }